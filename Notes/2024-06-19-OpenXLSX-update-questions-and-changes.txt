2024-06-19
==========
- XLWorkbook::setSheetActive changed behavior: attempting to setSheetActive on a non-existing or non-visible sheet will no longer unselect the active sheet
  * this change resolves a TBD
  * this change makes some bug fixes from 2024-05-29 obsolete
- editorials to align code with github version - but also removed some disabled code that was previously already disabled

CAUTION: the new Makefile.GNU does *not* generate OpenXLSX/OpenXLSX-Exports.hpp, which cmake somehow does - TBD how to handle this (but the file is pretty unchanging)
- added Makefile.GNU and make-gnu.sh which calls make --makefile Makefile.GNU "$@"
- gnu Makefile supports library modules & demos
- not yet in: creation of single static library file
- not in: benchmark applications (no need?)

2024-06-04
==========
- Global:
  * added a few TBDs
  * removed obsolete TODOs
  * marked newly implemented TODOs as @done / DONE

- XLWorkbook BUGFIX 2024-06-04: index now uses signed int because signed value -1 is used to guarantee mismatch with activeTab
affects:
  OpenXLSX/sources/XLWorkbook.cpp

2024-06-03
==========
- centralized XML parser settings:
  * const unsigned int pugi_parse_settings = pugi::parse_default | pugi::parse_ws_pcdata - so that e.g. pugi::parse_commments can easily be added in a central location
  * all calls to pugi::xml_document::load_string now use the new constant pugi_parse_settings
affects:
  OpenXLSX/sources/XLXmlData.cpp

- refactored XLSharedStrings:
  * string index (getStringIndex, getString, appendString, clearString) to use int32_t everywhere (was a mix of different int types before)
  * added size_t XLMaxSharedStrings = std::numeric_limits< int32_t >::max()
  * accordingly added a range check on string index in appendString to be within range of int32_t (XLMaxSharedStrings)
  * replaced std::distance in appendString with a return of the previously (for range check) calculated string cache element count == index of appended string
affects:
  OpenXLSX/headers/XLSharedStrings.hpp
  OpenXLSX/sources/XLSharedStrings.cpp

- refactored XLCellReference::columnAsNumber and XLCellReference::coordinatesFromAddress to check address validity and throw on error
affects:
  OpenXLSX/sources/XLCellReference.cpp
    
- implemented @todo for XLDocument::name to return only the filename, without path info
affects:
  OpenXLSX/headers/XLDocument.hpp
  OpenXLSX/sources/XLDocument.cpp

- added support for reconstructing partial or missing docProps/core.xml and docProps/app.xml:
  * added XLCommandType values CheckAndFixCoreProperties and CheckAndFixExtendedProperties
  affects:
    OpenXLSX/headers/XLCommandQuery.hpp
  * implemented namespace OpenXLSX_XLRelationships with function std::string GetStringFromType(XLRelationshipType type)
  affects: 
    OpenXLSX/headers/XLRelationships.hpp
  * implemented XLProperties::createFromTemplate and XLAppProperties::createFromTemplate,
     constructor from XLXmlData now invokes createFromTemplate if document_element is missing/empty
  affects:
    OpenXLSX/headers/XLProperties.hpp
    OpenXLSX/sources/XLProperties.cpp
  * implemented commands for XLCommandType CheckAndFixCoreProperties and CheckAndFixExtendedProperties
     in XLDocument::open and XLDocument::execCommand
  affects:
    OpenXLSX/sources/XLDocument.cpp

- reworked XLCellIterator for performance & bugfixes:
  performance: implemented consistent use of m_endReached and added public function bool endReached()
  feature: implemented std::string XLCellIterator::address() to return the current cell address
  feature: implemented XLCellIterator operator<< to send current cell address as string to ostream
  feature operator++: implemented exception when attempting to increment an iterator that is already at endReached
  TBD feature operator++: implemented exception when attempting to increment an iterator that points to a cell whose reference is > m_bottomRight
  performance operator++: added explicit (already known) row number to call to getCellNode (from row) to avoid having to extract it from XML attribute again
  performance XLCellIterator::distance: implemented a calculated distance based on m_currentCell, m_topLeft and m_bottomRight (if m_endReached)
  feature XLCellIterator::distance: check for negative distance
  --> This includes a BUGFIX in ::distance when last iterator was beyond (not before) this operator (UB infinite loop with segfault)
affects:
  OpenXLSX/headers/XLCellIterator.hpp
  OpenXLSX/sources/XLCellIterator.cpp

- XLCellAssignable performance: removed inheritance of all XLCell constructors, created explicit copy & move constructors
  XLCell: added overloaded operator<< to send cell value as text to ostream
affects:
  OpenXLSX/headers/XLCell.hpp
  OpenXLSX/sources/XLCell.cpp
  OpenXLSX/sources/XLSheet.cpp: in XLCellAssignable XLWorksheet::cell(const std::string& ref) const,
                                 changed static_cast to XLCellAssignable to move-construct from XLCell

- zippy: BUGFIX 2024-06-03: std::vector::data() can be nullptr when ::size() is 0, leading to a failure to load an empty file
affects:
  OpenXLSX/external/zippy.hpp
10850,10853c10851
<                 if (result->UncompressedSize())
<                     result->m_EntryData.resize(result->UncompressedSize());
<                 else
<                     result->m_EntryData.resize(1); // 2024-06-03 BUFIX: std::vector::data() can be nullptr when ::size() is 0, leading to a failure to load an empty file
---
>                 result->m_EntryData.resize(result->UncompressedSize());

- zippy: changed AmigaOS related code, because local folder on AmigaOS can not be explicitly expressed in a path
affects:
  OpenXLSX/external/zippy.hpp
10754c10755
<                 constexpr const char * localFolder = "";    // local folder on AmigaOS can not be explicitly expressed in a path
---
>                 constexpr const char * localFolder = "\"\"/"; // local folder on AmigaOS is ""


- pugixml BUGFIX 2024-06-03: void xml_document::save, line 7464ff:
  buffered_writer constructor uses get_write_encoding which can encoding_auto into a specific encoding
  (encoding_utf8), however, this code was still checking the non-transformed encoding parameter
affects:
  OpenXLSX/external/pugi/pugixml.cpp


- moved pugixml xml_node extensions from pugixml to XLXmlParser, derived class OpenXLSX_xml_document
affects:
  OpenXLSX/external/pugi/pugixml.hpp
  OpenXLSX/external/pugi/pugixml.cpp
  OpenXLSX/headers/XLXmlParser.hpp
  OpenXLSX/sources/XLXmlParser.cpp

  TBD: performance impact?
  If so: alternatively, use the existing pugiconfig.hpp for the defines of XML_NODE_DEFINITION_EXTENSION
   and XML_NODE_IMPLEMENTATION_EXTENSION and then pugixml would only need:

pugixml.hpp:
    // A light-weight handle for manipulating nodes in DOM tree
    class PUGIXML_CLASS xml_node
    {
#   ifdef XML_NODE_DEFINITION_EXTENSION
#       include XML_NODE_DEFINITION_EXTENSION
#   endif
    private: // restore private context in case FOO_DEFINITION_EXTENSION changes context
// ===== Here comes the rest of the class definition

pugixml.cpp:
// ===== Anywhere, really:
#ifdef XML_NODE_IMPLEMENTATION_EXTENSION
#    include XML_NODE_IMPLEMENTATION_EXTENSION
#endif

2024-05-31
==========
- XLDocument minor BUGFIX 2024-05-31: in destructor, added check for isOpen() to prevent double close of document if ::close has been called manually
  affects:
    OpenXLSX/sources/XLDocument.cpp

2024-05-29
==========
- XLWorkbook BUGFIX 2024-05-29: setSheetActive:
  * changed index to signed int, must support -1, in order not to match a valid activeTabIndex
  * set index to -1 if sheetRID is not found
affects:
  OpenXLSX/sources/XLWorkbook.cpp

- XLWorkbook BUGFIX 2024-05-29: sheetIsActive:
  * activeTabIndex now uses signed int and -1 for "no active tab", was being read as unsigned int, with 0 possibly matching a sheet index
  * don't attempt to match with a sheet rID if "no active tab"
  * prevent a match if activeTabIndex invalidly points to a non-existing sheet
affects:
  OpenXLSX/sources/XLWorkbook.cpp

2024-05-28
==========
-> completed transition of all pugi::xml_node or pugi::xml_attribute explicit boolean evaluations to .empty() evaluations:
 ( !node ) -> ( node.empty() )
and
 ( node ) -> ( not node.empty() )

-> for all checks vs "!node.empty()" or "!attr.empty()", replaced operator ! with keyword not for readability

- set of bugfixes and features
$ grep -rn 2024-05-28
sources/XLFormula.cpp:180:    if (not formulaNode.attribute("t").empty() ) {    // 2024-05-28: de-duplicated check (only relevant for performance,
sources/utilities/XLUtilities.hpp:12:#include "XLConstants.hpp"    // 2024-05-28 OpenXLSX::MAX_ROWS
sources/utilities/XLUtilities.hpp:101:        if( rowNumber > OpenXLSX::MAX_ROWS ) {    // 2024-05-28: added range check
sources/utilities/XLUtilities.hpp:163:        if( rowNode.empty() ) return cellNode;    // 2024-05-28: return an empty node in case of empty rowNode
sources/XLRowData.cpp:63:	  * @note 2024-05-28: added support for constructing with an empty m_cellNode from an empty rowDataRange which will allow obtaining
sources/XLRowData.cpp:190:        // 2024-05-28 BUGFIX: (!m_currentCell && rhs.m_currentCell) was not evaluated, triggering a segmentation fault on dereferencing
sources/XLRowData.cpp:247:        : m_rowNode(other.m_rowNode ? std::make_unique<XMLNode>(*other.m_rowNode) : nullptr),    // 2024-05-28: support for copy-construction from an empty XLDataRange
sources/XLRowData.cpp:301:	  * @note 2024-05-28: enhanced ::begin() to return an end iterator for an empty range
sources/XLProperties.cpp:70:        // 2024-05-28 DONE: tested this code with two pairs in headingPairsNode
sources/XLProperties.cpp:78:        return result; // 2024-05-28: std::move should not be used when the operand of a return statement is the name of a local variable
sources/XLProperties.cpp:251:        // ===== 2024-05-28: delete all (non-element) nodes between item and count node, *then* delete non-element nodes following a count node 
sources/XLDocument.cpp:521:    // 2024-05-28: is the above TODO resolved? It seems empty app properties are created now?
sources/XLDocument.cpp:554:	 // 2024-05-28 TBD whether !m_archive.isValid() can be used to prevent a double-close (manual call to close + destructor):
sources/XLCell.cpp:165:XLCell::operator bool() const { return m_cellNode && (not m_cellNode->empty() ); } // ===== 2024-05-28: replaced explicit bool evaluation
sources/XLRow.cpp:278:        // 2024-05-28 BUGFIX: (!lhs.m_rowNode && rhs.m_rowNode) was not evaluated, triggering a segmentation fault on dereferencing
headers/XLSharedStrings.hpp:158:			* @note 2024-05-28 added function to enable other classes to check m_stringCache status

- removed some obsolete code that was already in comments


2024-05-21
==========

/Examples/CMakeLists.txt
--> Why if (WIN32) x2 when OPENXLSX_ENABLE_NOWIDE has been defined in /CMakeLists.txt and is used in the third if-statement?

/OpenXLSX/CMakeLists.txt

--> Pull Request: Fix OPENXLSX_LIBRARY_TYPE checks #225 overlooked?
line 119:
  (current)
if(NOT ${OPENXLSX_LIBRARY_TYPE} STREQUAL "STATIC" AND NOT ${OPENXLSX_LIBRARY_TYPE} STREQUAL "SHARED")
  (vs. patch)
if(NOT "${OPENXLSX_LIBRARY_TYPE}" STREQUAL "STATIC" AND NOT "${OPENXLSX_LIBRARY_TYPE}" STREQUAL "SHARED")


line 127:
  (current)
if (${OPENXLSX_LIBRARY_TYPE} STREQUAL "STATIC")
  (vs. patch)
if ("${OPENXLSX_LIBRARY_TYPE}" STREQUAL "STATIC")

line 155:
  (current)
if (${OPENXLSX_LIBRARY_TYPE} STREQUAL "SHARED")
  (vs. patch)
if ("${OPENXLSX_LIBRARY_TYPE}" STREQUAL "SHARED")

/OpenXLSX/external/zippy/zippy.hpp
--> intentional use? FILESYSTEM_NAMESPACE in lines 4576-4577 and 4624-4625:
    Should be fine, I was just not sure if under these precompiler definitions, std:: namespace has these functions
#            define MZ_DELETE_FILE FILESYSTEM_NAMESPACE::remove
#            define MZ_RENAME_FILE FILESYSTEM_NAMESPACE::rename
  (was)
#            define MZ_DELETE_FILE remove
#            define MZ_RENAME_FILE rename


/OpenXLSX/headers/XLCell.hpp
--> missing include for std::basic_ostream (used in XLCell::print) in line 53
#include <ostream>  // std::basic_ostream
--> missing include for std::ostream (used in operator<<) in line 54
#include <iostream> // ostream

--> line 225: explicit keyword triggers tons of compiler errors when << operator attempts to use an XLCell (implicit conversion works because << is overloaded for XLCellAssignable)


/OpenXLSX/headers/XLCellIterator.hpp
--> line 171: what does edit removing typename do?
--> see below comment for XLRowData.hpp / 2024-06-18

/OpenXLSX/sources/XLCellValue.cpp
--> line 256: if-statement with an initializer: I am not convinced in terms of readability - are you sure you want to start using this? :)

/OpenXLSX/headers/XLCommandQuery.hpp
--> missing include for uint8_t in line 55:
#include <cstdint> // uint8_t

/OpenXLSX/headers/XLContentTypes.hpp
--> missing include for uint8_t in line 54:
#include <cstdint> // uint8_t

/OpenXLSX/headers/XLDocument.hpp
--> missing include for std::find_if in line 54:
#include <algorithm> // std::find_if

/OpenXLSX/headers/XLFormula.hpp
--> line 228: editorial whitespaces

/OpenXLSX/headers/XLRowData.hpp
--> line 254ff: what does removing the typename here accomplish?
2024-06-18: compiler can deduce that std::bidirectional_iterator_tag shall be evaluated as a type, therefore "typename" keyword is not needed
(from)
        template<typename T,
                 typename = std::enable_if_t<!std::is_same_v<T, XLRowDataProxy> &&
                                                 std::is_base_of_v<typename std::bidirectional_iterator_tag,
                                                                   typename std::iterator_traits<typename T::iterator>::iterator_category>,
                                             T>>
(to)
        template<typename T,
                 typename = std::enable_if_t<!std::is_same_v<T, XLRowDataProxy> &&
                                                 std::is_base_of_v<std::bidirectional_iterator_tag,
                                                                   typename std::iterator_traits<typename T::iterator>::iterator_category>,
                                             T>>

--> line 338ff & line 420ff: same question as for line 254ff

/OpenXLSX/sources/XLRowData.cpp
--> line 518ff: wrapping the comment wrapped over into commented out code "in case it's needed later"
(old)
        // XMLNode first_child = m_rowNode->first_child_of_type(pugi::node_element); // pretty formatting by inserting before an existing
        // first child XMLNode curNode{}; if (first_child.empty())
(new)
        // XMLNode first_child = m_rowNode->first_child_of_type(pugi::node_element); // pretty formatting by inserting before an existing
        // first child
        // XMLNode curNode{};
        // if (first_child.empty())

/OpenXLSX/sources/XLSharedStrings.hpp
--> missing include for std::ostream (used in ::print) in line 54
#include <ostream>    // std::basic_ostream

--> line 158: while simplified in XLCell to std::basic_ostream<char>, the old code remained here -> changed to be in line with your other change
(old)
        void print(std::basic_ostream<char, std::char_traits<char> >& os);
(new)
        void print(std::basic_ostream<char>& ostr) const;

/OpenXLSX/sources/XLSharedStrings.cpp
--> same change for ::print

/OpenXLSX/headers/XLSheet.hpp
--> missing include for uint8_t etc in line 54:
#include <cstdint>    // uint8_t, uint16_t, uint32_t
--> missing include for std::ostream (used in ::print) in line 55
#include <ostream>    // std::basic_ostream

--> line 735: while simplified in XLCell to std::basic_ostream<char>, the old code remained here -> changed to be in line with your other change
(old)
        void print(std::basic_ostream<char, std::char_traits<char> >& os);
(new)
        void print(std::basic_ostream<char>& ostr) const;

/OpenXLSX/sources/XLSheet.cpp
--> same change for ::print

--> (new) line 447: is the LINTer in use maybe garbling some code (e.g. this lambda here?) into a poorly readable format?
    auto columnNode = xmlDocument().document_element().child("cols").find_child([&](const XMLNode node) {
        return (columnNumber >= node.attribute("min").as_int() && columnNumber <= node.attribute("max").as_int()) ||
               node.attribute("min").as_int() > columnNumber;
    });

--> (new) line 463ff: it appears as though the LINTer is re-flowing in-line comments, obviously disregarding keywords like BUGFIX or TODO
(old, linted)
    // ===== If the node exists for the column, but spans several columns, split it into individual nodes, and set columnNode to the right
    // one... BUGFIX 2024-04-27 - old if condition would split a multi-column setting even if columnNumber is < minColumn (see lambda return
    // value above) NOTE 2024-04-27: the column splitting for loaded files is already handled in the constructor, technically this code is
    // not necessary here
(new, limited to 140 characters / line)
    // ===== If the node exists for the column, but spans several columns, split it into individual nodes, and set columnNode to the right
    // one...
    // BUGFIX 2024-04-27 - old if condition would split a multi-column setting even if columnNumber is < minColumn (see lambda return value
    // above)
    // NOTE 2024-04-27: the column splitting for loaded files is already handled in the constructor, technically this code is not necessary
    // here

--> (new) line 477ff: another example for bad LINTing
(old, linted)
        // BUGFIX 2024-04-27: the original node should not be deleted, but - in line with XLWorksheet constructor - is now limited above to
        // min = max attribute
        // // ===== Delete the original node
        // columnNode = columnNode.previous_sibling_of_type(pugi::node_element); // due to insert loop, previous node should be guaranteed
        // to be an element node xmlDocument().document_element().child("cols").remove_child(columnNode.next_sibling());
(new, limited to 140 characters / line)
        // BUGFIX 2024-04-27: the original node should not be deleted, but - in line with XLWorksheet constructor - is now limited above to
        // min = max attribute
        // // ===== Delete the original node
        // columnNode = columnNode.previous_sibling_of_type(pugi::node_element); // due to insert loop, previous node should be guaranteed
        // // to be an element node
        // xmlDocument().document_element().child("cols").remove_child(columnNode.next_sibling());

--> (new) line 530: is use of std::max in a loop better for performance?
(old)
        if (cellCount > maxCount) maxCount = cellCount;
(new)
        maxCount = std::max(cellCount, maxCount);

--> (new) line 536: bad LINTing of disabled code

--> (new) line 571ff: readability of for-loop improved

/OpenXLSX/headers/XLWorkbook.hpp
--> missing include for std::ostream (used in XLCell::print) in line 54
#include <ostream>    // std::basic_ostream

--> line 316: while simplified in XLCell to std::basic_ostream<char>, the old code remained here -> changed to be in line with your other change
(old)
        void print(std::basic_ostream<char, std::char_traits<char> >& os);
(new)
        void print(std::basic_ostream<char>& ostr) const;

/OpenXLSX/sources/XLWorkbook.cpp
--> line 118ff: readability of for-loop improved

--> line 153ff: is it intended that XLWorkbook::hasSharedStrings() always returns true?

--> line 394: improved bad LINTing
--> line 445: improved bad LINTing
--> line 459: improved bad LINTing
--> line 488: improved bad LINTing
--> line 507: improved bad LINTing
--> line 531: improved bad LINTing
--> line 546: improved bad LINTing
--> line 566: improved bad LINTing

--> line 666: updated ::print

--> line 694: improved bad LINTing
--> line 718: improved bad LINTing
--> line 733: improved bad LINTing

/OpenXLSX/sources/XLXmlData.cpp
--> line 48: moved sstream include to "External Includes"
--> line 59: removed another redundant use of OpenXLSX namespace

/OpenXLSX/sources/XLCell.cpp
--> line 139: removed obsolete debugging std::cout

/OpenXLSX/sources/XLCellReference.cpp
--> line 180: added comment
--> line 266: fixed indentation
--> line 312ff: implemented forgotten static_cast as in the lines above

/OpenXLSX/sources/XLColor.cpp
--> line 48: missing include <ios> for std::hex

/OpenXLSX/sources/XLColumn.cpp
--> line 105: replaced XMLAttribute explicit booltype check with .empty() check

/OpenXLSX/sources/XLDateTime.cpp
--> line 8ff: removed two obsolete includes: cstdint and string

/OpenXLSX/sources/XLDocument.cpp
--> line 47: moved include for algorithm to "External Includes"
--> line 493: fixed bad optimization, line now correctly checks XMLNode::empty
--> line 507: added explicit check for XMLNode::empty
--> line 678: removed obsolete variable trimmedValue (and initialization)
--> line 843: improved bad LINTing
--> lines 846, 859, 875, 902, 916, 956: improved bad LINTing on break-statement
--> line 1009: added explicit break to prevent future bug by fall-through
--> line 1025: replaced bad double negation (to force bool evaluation) by explicit call to IZipArchive::isValid()

/OpenXLSX/sources/XLProperties.cpp
--> line 158: removed a misleading const qualifier, because the underlying XML is modified here
--> line 166ff: renamed variable "iter" to "theNode", because it is not a std::iterator
--> line 183ff: renamed variable "iter" to "theNode", because it is not a std::iterator
--> line 205: ! -> not
--> line 219: removed a misleading const qualifier, because the underlying XML is modified here
--> line 248ff: ! -> not
--> line 248ff: removed a redundant check on not count.empty() including redundant scope
--> line 272, 276: ! -> not
--> line 277: removed a misleading const qualifier, because the underlying XML is modified here
--> line 292: removed a misleading const qualifier, because the underlying XML is modified here
--> line 293: explicit bool type -> XMLNode::empty()
--> line 303: removed a misleading const qualifier, because property needs to be re-used in case it came up empty
--> line 303: changed auto -> XMLNode because property is re-used
--> line 304: explicit bool type -> XMLNode::empty()
--> line 304f: minor BUGFIX 2024-05-21: re-assign the newly created node to property, so that .text().get() is defined behavior
--> line 320: explicit bool type -> XMLNode::empty()
--> line 331: removed a misleading const qualifier, because the underlying XML is modified here
--> line 342: removed a misleading const qualifier, because the underlying XML is modified here
--> line 364: explicit bool type -> XMLNode::empty()
--> line 365: removed a misleading const qualifier, because the underlying XML is modified here
--> line 388: removed a misleading const qualifier, because the underlying XML is modified here

/OpenXLSX/sources/XLRelationships.cpp
--> added some missing includes:
   line 47f:
#include <cstdint>      // uint32_t
#include <memory>       // std::make_unique
   line 50ff:
#include <stdexcept>    // std::invalid_argument
#include <string>       // std::stoi, std::literals::string_literals
#include <vector>       // std::vector

--> line 262: fixed return type in the comment 
--> line 296f: improved bad LINTing
--> line 298: explicit bool type -> XMLNode::empty()
